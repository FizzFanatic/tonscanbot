import telebot
import config
from telebot import types
import get_transactions
from flask import Flask, request
import handlers

secret = '####'
url = '####' + secret

bot = telebot.TeleBot(config.Token, threaded=False)
bot.remove_webhook()
bot.set_webhook(url=url)


app = Flask(__name__)
handlers.check_address_handlers(bot)


@app.route('/webhook_update' + secret, methods=['POST'])
def webhook():
    update = telebot.types.Update.de_json(request.stream.read().decode('utf-8'))
    bot.process_new_updates([update])
    return 'ok', 200



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ
@bot.message_handler(commands=['start', 'menu'])
def send_welcome(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
    if message.chat.type == 'private':

        bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAEMRYJmZRKPofwgX63RElacVAk8zy-gegAC0wADVp29CvUyj5fVEvk9NQQ")
        bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ üòä")
        bot.send_message(message.chat.id, "–ù–∞—à –∫–∞–Ω–∞–ª: @getscanton üì∞")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        btn1 = types.KeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥—Ä–µ—Å')
        btn2 = types.KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
        markup.add(btn1, btn2)

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=markup)

    else:
        pass


@bot.message_handler(func=lambda message: message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
def information(message):
    bot.send_message(message.chat.id, "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫–æ –º–Ω–µ, –µ—Å–ª–∏ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã. –Ø —Ä–∞–¥ –ª—é–±—ã–º –æ—Ç–∑—ã–≤–∞–º –∏ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!\n\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: @\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @\n\nüíé –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞:\n\nUQBHindLjVUAdBCLmkNSk0kwr8XYwX0nOFFuYxBzQ-LFkh9u")


@bot.callback_query_handler(func=lambda call: call.data.startswith('transactions_'))
def handle_transaction_callback(call):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º partition –≤–º–µ—Å—Ç–æ split, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏ –≤ –∞–¥—Ä–µ—Å–µ
    prefix, separator, address = call.data.partition('_')

    transactions = get_transactions.get_transaction_account(address)

    if transactions:
        for result_transaction in transactions:
            message_text = (f"üíé –°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {result_transaction['value']} TON\n"
                            f"üîÄ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {result_transaction['direction']}")
            if 'comment' in result_transaction and result_transaction['comment']:
                message_text += f"\n‚úâÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {result_transaction['comment']}"
            bot.send_message(call.message.chat.id, message_text)
    else:
        bot.send_message(call.message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö. –ò–ª–∏ –∏—Ö –Ω–µ—Ç üòû")
